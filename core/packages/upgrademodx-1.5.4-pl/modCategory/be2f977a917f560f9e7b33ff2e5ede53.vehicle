<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Chunks' => 
    array (
      'f82c326ce6e299b7248f13e6c23db0bd' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"UpgradeMODXSnippetScriptSource","description":"Source for MODX Upgrade script. Used internally","editor_type":0,"category":0,"cache_type":0,"snippet":"<?php\\r\\n\\r\\n\\/**\\r\\n * UpgradeMODXWidget snippet for UpgradeMODX extra\\r\\n *\\r\\n * Copyright 2015 by Bob Ray <http:\\/\\/bobsguides.com>\\r\\n * Created on 08-16-2015\\r\\n *\\r\\n * UpgradeMODX is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation; either version 2 of the License, or (at your option) any later\\r\\n * version.\\r\\n *\\r\\n * UpgradeMODX is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * UpgradeMODX; if not, write to the Free Software Foundation, Inc., 59 Temple\\r\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package upgrademodx\\r\\n *\\/\\r\\n\\r\\n\\r\\n\\/*\\r\\n * This package was inspired by the work of a number of people and I have borrowed some of their code.\\r\\n * Dmytro Lukianenko (dmi3yy) is the original author of the MODX install script. Susan Sottwell,\\r\\n * Sharapov, Bumkaka, Inreti, Zaigham Rana, frischnetz, and AgelxNash, also contributed and I\'d\\r\\n * like to thank all of them for laying the groundwork.\\r\\n  *\\/\\r\\n\\r\\nerror_reporting(0);\\r\\nini_set(\'display_errors\', 0);\\r\\nset_time_limit(0);\\r\\nini_set(\'max_execution_time\', 0);\\r\\nheader(\'Content-Type: text\\/html; charset=utf-8\');\\r\\n\\r\\nif (extension_loaded(\'xdebug\')) {\\r\\n    ini_set(\'xdebug.max_nesting_level\', 100000);\\r\\n}\\r\\n\\r\\n\\r\\nclass MODXInstaller {\\r\\n    static public function downloadFile($url, $path, $method, $certPath)\\r\\n    {\\r\\n        $newfname = $path;\\r\\n        if (file_exists($path)) {\\r\\n            unlink($path);\\r\\n        }\\r\\n        $newf = null;\\r\\n        $file = null;\\r\\n        if ($method == \'fopen\') {\\r\\n            try {\\r\\n                $file = fopen($url, \\"rb\\");\\r\\n                if ($file) {\\r\\n                    $newf = fopen($newfname, \\"wb\\");\\r\\n                    if ($newf) {\\r\\n                        set_time_limit(0);\\r\\n                        while (!feof($file)) {\\r\\n                            fwrite($newf, fread($file, 1024 * 8), 1024 * 8);\\r\\n                        }\\r\\n                    } else {\\r\\n                        return (\'Could not open \' . $newf . \' for writing\');\\r\\n                    }\\r\\n                } else {\\r\\n                    return (\'fopen failed to open \' . $url);\\r\\n                }\\r\\n            } catch (Exception $e) {\\r\\n                return \'ERROR:Download \' . $e->getMessage();\\r\\n            }\\r\\n            if ($file) {\\r\\n                fclose($file);\\r\\n            }\\r\\n            if ($newf) {\\r\\n                fclose($newf);\\r\\n            }\\r\\n\\r\\n        } elseif ($method == \'curl\') {\\r\\n            $newf = fopen($path, \\"wb\\");\\r\\n            if ($newf) {\\r\\n                set_time_limit(0);\\r\\n                $ch = curl_init(str_replace(\\" \\", \\"%20\\", $url));\\r\\n                curl_setopt($ch, CURLOPT_CAINFO, $certPath);\\r\\n                curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\\r\\n                curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 1);\\r\\n                curl_setopt($ch, CURLOPT_TIMEOUT, 180);\\r\\n                curl_setopt($ch, CURLOPT_USERAGENT, \'Mozilla\\/4.0 (compatible; MSIE 6.0)\');\\r\\n                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\\r\\n                curl_setopt($ch, CURLOPT_FILE, $newf);\\r\\n                $openBasedir = ini_get(\'open_basedir\');\\r\\n                if (empty($openBasedir) && filter_var(ini_get(\'safe_mode\'),\\r\\n                        FILTER_VALIDATE_BOOLEAN) === false) {\\r\\n                    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\\r\\n                } else {\\r\\n                    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, false);\\r\\n                    $rch = curl_copy_handle($ch);\\r\\n                    curl_setopt($rch, CURLOPT_URL, $url);\\r\\n                    $header = curl_exec($rch);\\r\\n                    if (!curl_errno($rch)) {\\r\\n                        $newurl = $url;\\r\\n                        $code = curl_getinfo($rch, CURLINFO_HTTP_CODE);\\r\\n                        if ($code == 301 || $code == 302) {\\r\\n                            if (version_compare(PHP_VERSION, \'5.3.7\') < 0) {\\r\\n                                preg_match(\'\\/Location:(.*?)\\\\n\\/i\', $header, $matches);\\r\\n                                $newurl = trim(array_pop($matches));\\r\\n                            } else {\\r\\n                                $newurl = curl_getinfo($rch, CURLINFO_REDIRECT_URL);\\r\\n                            }\\r\\n                        }\\r\\n                        curl_close($rch);\\r\\n                        curl_setopt($ch, CURLOPT_URL, $newurl);\\r\\n                    }\\r\\n                }\\r\\n                $retVal = curl_exec($ch);\\r\\n                if ($retVal === false) {\\r\\n\\r\\n                    return (\'cUrl download of modx.zip failed \' . curl_error($ch));\\r\\n                }\\r\\n                curl_close($ch);\\r\\n            } else {\\r\\n                return (\'Cannot open \' . $path . \' for writing\');\\r\\n            }\\r\\n        } else {\\r\\n            return \'Invalid method in call to downloadFile()\';\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    static public function removeFolder($path, $removeRoot = true) {\\r\\n        $dir = realpath($path);\\r\\n        if (!is_dir($dir)) {\\r\\n            return;\\r\\n        }\\r\\n        $it = new RecursiveDirectoryIterator($dir);\\r\\n        $files = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::CHILD_FIRST);\\r\\n        foreach ($files as $file) {\\r\\n            if ($file->getFilename() === \'.\' || $file->getFilename() === \'..\') {\\r\\n                continue;\\r\\n            }\\r\\n            if ($file->isDir()) {\\r\\n                rmdir($file->getRealPath());\\r\\n            } else {\\r\\n                unlink($file->getRealPath());\\r\\n            }\\r\\n        }\\r\\n        if ($removeRoot) {\\r\\n            rmdir($dir);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    static public function copyFolder($src, $dest) {\\r\\n\\r\\n        $path = realpath($src);\\r\\n        $dest = realpath($dest);\\r\\n        $objects = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path), RecursiveIteratorIterator::SELF_FIRST);\\r\\n        foreach ($objects as $name => $object) {\\r\\n            $startsAt = substr(dirname($name), strlen($path));\\r\\n            self::mmkDir($dest . $startsAt, true);\\r\\n            if ($object->isDir()) {\\r\\n                self::mmkDir($dest . substr($name, strlen($path)));\\r\\n            }\\r\\n\\r\\n            if (is_writable($dest . $startsAt) and $object->isFile()) {\\r\\n                copy((string)$name, $dest . $startsAt . DIRECTORY_SEPARATOR . basename($name));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    static public function normalize($paths) {\\r\\n        if (is_array($paths)) {\\r\\n            foreach ($paths as $k => $v) {\\r\\n                $v = str_replace(\'\\\\\\\\\', \'\\/\', rtrim($v, \'\\/\\\\\\\\\'));\\r\\n                $paths[$k] = $v;\\r\\n            }\\r\\n        } else {\\r\\n            $paths = str_replace(\'\\\\\\\\\', \'\\/\', rtrim($paths, \'\\/\\\\\\\\\'));\\r\\n        }\\r\\n        return $paths;\\r\\n    }\\r\\n\\r\\n    static public function getDirectories($directories = array()) {\\r\\n        if (empty($directories)) {\\r\\n            $directories = array(\\r\\n                \'setup\' => MODX_BASE_PATH . \'setup\',\\r\\n                \'core\' => MODX_CORE_PATH,\\r\\n                \'manager\' => MODX_MANAGER_PATH,\\r\\n                \'connectors\' => MODX_CONNECTORS_PATH,\\r\\n            );\\r\\n        }\\r\\n        \\/* See if we need to do processors path *\\/\\r\\n        $modxProcessorsPath = MODXInstaller::normalize(MODX_PROCESSORS_PATH);\\r\\n        if (strpos(MODX_PROCESSORS_PATH, \'core\\/model\\/modx\\/processors\') === false) {\\r\\n            $directories[\'core\\/model\\/modx\\/processors\'] = $modxProcessorsPath;\\r\\n        }\\r\\n\\r\\n        \\/* Normalize directory paths *\\/\\r\\n        $directories = MODXInstaller::normalize($directories);\\r\\n\\r\\n        return $directories;\\r\\n\\r\\n    }\\r\\n\\r\\n    static public function copyFiles($sourceDir, $directories) {\\r\\n\\r\\n        \\/* Normalize directory paths *\\/\\r\\n        MODXInstaller::normalize($directories);\\r\\n        MODXInstaller::normalize($sourceDir);\\r\\n\\r\\n        \\/* Copy directories *\\/\\r\\n        foreach ($directories as $source => $target) {\\r\\n            MODXInstaller::mmkDir($target);\\r\\n            set_time_limit(0);\\r\\n            MODXInstaller::copyFolder($sourceDir . \'\\/\' . $source, $target);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    static public function mmkDir($folder, $perm = 0755) {\\r\\n        if (!is_dir($folder)) {\\r\\n            $oldumask = umask(0);\\r\\n            mkdir($folder, $perm, true);\\r\\n            umask($oldumask);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    static public function unZip($corePath, $source, $destination, $forcePclZip = false) {\\r\\n        $status = true;\\r\\n        if ( (! $forcePclZip) && class_exists(\'ZipArchive\', false)) {\\r\\n            $zip = new ZipArchive;\\r\\n            if ($zip instanceof ZipArchive) {\\r\\n                $open = $zip->open($source, ZIPARCHIVE::CHECKCONS);\\r\\n\\r\\n                if ($open == true) {\\r\\n                    $result = $zip->extractTo($destination);\\r\\n                    if ($result === false) {\\r\\n                         \\/* Yes, this is fucking nuts, but it\'s necessary on some platforms *\\/\\r\\n                         $result = $zip->extractTo($destination);\\r\\n                         if ($result === false) {\\r\\n                             $msg = $zip->getStatusString();\\r\\n                             MODXInstaller::quit($msg);\\r\\n                         }\\r\\n                    }\\r\\n                    $zip->close();\\r\\n                } else {\\r\\n                    $status = \'Could not open ZipArchive \' . $source . \' \' . $zip->getStatusString();\\r\\n                }\\r\\n\\r\\n            } else {\\r\\n                $status = \'Could not instantiate ZipArchive\';\\r\\n            }\\r\\n        } else {\\r\\n            $zipClass = $corePath . \'xpdo\\/compression\\/pclzip.lib.php\';\\r\\n            if (file_exists($zipClass)) {\\r\\n                include $corePath . \'xpdo\\/compression\\/pclzip.lib.php\';\\r\\n                $archive = new PclZip($source);\\r\\n                if ($archive->extract(PCLZIP_OPT_PATH, $destination) == 0) {\\r\\n                    $status = \'Extraction with PclZip failed - Error : \' . $archive->errorInfo(true);\\r\\n                }\\r\\n            } else {\\r\\n                $status = \'Neither ZipArchive, nor PclZip were available to unzip the archive\';\\r\\n            }\\r\\n        }\\r\\n        return $status;\\r\\n    }\\r\\n\\r\\n\\r\\n    \\/**\\r\\n     * Get name of downloaded MODX directory (e.g., modx-3.4.0-pl).\\r\\n     *\\r\\n     * @param $tempDir string - temporary download directory\\r\\n     * @return string - Name of directory\\r\\n     *\\/\\r\\n    public static function getModxDir($tempDir) {\\r\\n        $handle = opendir($tempDir);\\r\\n        if ($handle !== false) {\\r\\n            while (false !== ($name = readdir($handle))) {\\r\\n                if ($name != \\".\\" && $name != \\"..\\") {\\r\\n                    $dir = $name;\\r\\n                }\\r\\n            }\\r\\n            closedir($handle);\\r\\n        } else {\\r\\n            MODXInstaller::quit (\'Unable to read directory contents or directory is empty: \' . dirname(__FILE__) . \'\\/temp\');\\r\\n        }\\r\\n\\r\\n        if (empty($dir)) {\\r\\n            MODXInstaller::quit(\'Unknown error reading \\/temp directory\');\\r\\n        }\\r\\n\\r\\n        return $dir;\\r\\n    }\\r\\n\\r\\n    public static function quit($msg) {\\r\\n        $begin = \'<div style=\\"margin:auto;margin-top:100px;width:40%;height:80px;padding:30px;color:red;border:3px solid darkgray;text-align:center;background-color:rgba(160, 233, 174, 0.42);border-radius:15px;box-shadow: 10px 10px 5px #888888;\\"><p style=\\"font-size: 14pt;\\">\';\\r\\n        $end = \'<\\/p><p style=\\"margin-bottom:120px;\\"><a href=\\"\' . MODX_MANAGER_URL . \'\\">Back to Manager<\\/a><\\/p><\\/div>\';\\r\\n        die($begin . $msg  . $end);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/* Do not touch the following comments! You have been warned!  *\\/\\r\\n\\/** @var $forcePclZip bool - force the use of PclZip instead of ZipArchive *\\/\\r\\n\\/* [[+ForcePclZip]] *\\/\\r\\n\\/* [[+ForceFopen]] *\\/\\r\\n\\/* [[+InstallData]] *\\/\\r\\n\\r\\n$method = 0;\\r\\nif (extension_loaded(\'curl\') && (!$forceFopen)) {\\r\\n    $method = \'curl\';\\r\\n} elseif (ini_get(\'allow_url_fopen\')) {\\r\\n    $method = \'fopen\';\\r\\n}\\r\\n\\r\\n\\/* Next two lines for running in debugger  *\\/\\r\\n\\/\\/ if (true || !empty($_GET[\'modx\']) && is_scalar($_GET[\'modx\']) && isset($InstallData[$_GET[\'modx\']])) {\\r\\n\\/\\/       $rowInstall = $InstallData[\'revo2.4.1-pl\'];\\r\\n\\/\\/ Comment our the two lines below to run in debugger.\\r\\n\\r\\n\\r\\n   if (!empty($_GET[\'modx\']) && is_scalar($_GET[\'modx\']) && isset($InstallData[$_GET[\'modx\']])) {\\r\\n       $rowInstall = $InstallData[$_GET[\'modx\']];\\r\\n\\r\\n    if (file_exists(\'config.core.php\')) {\\r\\n        @include \'config.core.php\';\\r\\n    }\\r\\n    if (!defined(\'MODX_CORE_PATH\')) {\\r\\n        MODXInstaller::quit(\'Could not read config.core.php\');\\r\\n    }\\r\\n\\r\\n    @include MODX_CORE_PATH . \'config\\/\' . MODX_CONFIG_KEY . \'.inc.php\';\\r\\n\\r\\n    if (!defined(\'MODX_CONNECTORS_PATH\')) {\\r\\n        MODXInstaller::quit (\'Could not read main config file\');\\r\\n    }\\r\\n\\r\\n\\r\\n    \\/* run unzip and install *\\/\\r\\n    $source = dirname(__FILE__) . \\"\\/modx.zip\\";\\r\\n    $url = $rowInstall[\'link\'];\\r\\n    $certPath = MODX_CORE_PATH . \'components\\/upgrademodx\\/cacert.pem\';\\r\\n    if (! file_exists($certPath)) {\\r\\n        MODXInstaller::quit(\'Could not find cacert.pem\');\\r\\n    }\\r\\n    set_time_limit(0);\\r\\n\\r\\n    $success = MODXInstaller::downloadFile($url, $source, $method, $certPath);\\r\\n\\r\\n    \\/* Make sure we have the downloaded file *\\/\\r\\n\\r\\n    if ($success !== true) {\\r\\n        MODXInstaller::quit($success);\\r\\n    } elseif (!file_exists($source)) {\\r\\n            MODXInstaller::quit (\'Missing file: \' . $source);\\r\\n    } elseif (filesize($source) < 64) {\\r\\n        MODXInstaller::quit(\'File: \' . $source . \' is empty -- download failed\');\\r\\n    }\\r\\n\\r\\n    $tempDir = realPath(dirname(__FILE__)) . \'\\/ugmtemp\';\\r\\n    MODXInstaller::mmkdir($tempDir);\\r\\n    clearstatcache();\\r\\n\\r\\n    $destination = $tempDir;\\r\\n\\r\\n    if (! file_exists($tempDir)) {\\r\\n        MODXInstaller::quit(\'Unable to create directory: \' . $tempDir);\\r\\n    }\\r\\n\\r\\n    if (! is_readable($tempDir)) {\\r\\n        MODXInstaller::quit(\'Unable to read from \\/ugmtemp directory\');\\r\\n    }\\r\\n    set_time_limit(0);\\r\\n    $success = MODXInstaller::unZip(MODX_CORE_PATH, $source, $destination, $forcePclZip);\\r\\n    if ($success !== true) {\\r\\n        MODXInstaller::quit($success);\\r\\n    }\\r\\n\\r\\n\\r\\n    $directories = MODXInstaller::getDirectories();\\r\\n\\r\\n    $directories = MODXInstaller::normalize($directories);\\r\\n\\r\\n    $sourceDir = $tempDir . \'\\/\' . MODXInstaller::getModxDir($tempDir);\\r\\n    $sourceDir = MODXInstaller::normalize($sourceDir);\\r\\n\\r\\n    MODXInstaller::copyFiles($sourceDir, $directories);\\r\\n\\r\\n    unlink($source);\\r\\n\\r\\n    if (! is_dir(MODX_BASE_PATH . \'setup\')) {\\r\\n        MODXInstaller::quit(\'File Copy Failed\');\\r\\n    }\\r\\n\\r\\n    MODXInstaller::removeFolder($tempDir, true);\\r\\n\\r\\n    \\/* Clear cache files but not cache folder *\\/\\r\\n\\r\\n    $path = MODX_CORE_PATH . \'cache\';\\r\\n    if (is_dir($path)) {\\r\\n        MODXInstaller::removeFolder($path, false);\\r\\n    }\\r\\n\\r\\n    unlink(basename(__FILE__));\\r\\n\\r\\n    \\/* Log upgrade in Manager Actions log *\\/\\r\\n    include MODX_CORE_PATH . \'model\\/modx\\/modx.class.php\';\\r\\n\\r\\n    $modx = new modX();\\r\\n    $modx->initialize(\'web\');\\r\\n    $modx->lexicon->load(\'core:default\');\\r\\n    $modx->logManagerAction(\'Upgrade MODX\',\'modWorkspace\', $modx->lexicon(\'version\') . \' \' . $_GET[\'modx\'], $_GET[\'userId\'] );\\r\\n    $modx = null;\\r\\n\\r\\n    \\/* Forward to Setup *\\/\\r\\n    header(\'Location: \' . $rowInstall[\'location\']);\\r\\n\\r\\n} else {\\r\\n    $ItemGrid = array();\\r\\n    foreach ($InstallData as $ver => $item) {\\r\\n        $ItemGrid[$item[\'tree\']][$ver] = $item;\\r\\n    }\\r\\n\\r\\n\\/* Display the Form *\\/\\r\\n    echo \'\\r\\n<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n    <title>UpgradeMODX<\\/title>\\r\\n    <meta charset=\\"utf-8\\">\\r\\n    <style type=\\"text\\/css\\">\\r\\n        @import url(https:\\/\\/fonts.googleapis.com\\/css?family=PT+Serif:400,700&subset=latin,cyrillic);article,aside,audio,b,body,canvas,dd,details,div,dl,dt,em,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,img,label,li,mark,menu,nav,ol,p,section,span,strong,summary,table,tbody,td,tfoot,th,thead,time,tr,u,ul,video{margin:0;padding:0;border:0;outline:0;vertical-align:baseline;background:0 0;font-size:100%}a{margin:0;padding:0;font-size:100%;vertical-align:baseline;background:0 0}table{border-collapse:collapse;border-spacing:0}td,td img{vertical-align:top}button,input,select,textarea{margin:0;font-size:100%}input[type=password],input[type=text],textarea{padding:0}input[type=checkbox]{vertical-align:bottom}input[type=radio]{vertical-align:text-bottom}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}html{overflow-y:scroll}body{color:#111;text-align:left;font:12px Verdana,\\"Geneva CY\\",\\"DejaVu Sans\\",sans-serif}button,input,select,textarea{font-family:Verdana,\\"Geneva CY\\",\\"DejaVu Sans\\",sans-serif}a,a:active,a:focus,a:hover,a:visited,button,input[type=button],input[type=submit],label{cursor:pointer}::selection{background:#84d5e8;color:#fff;text-shadow:none}html{position:relative;background:#f8f8f8 url(http:\\/\\/installer.evolution-cms.com\\/img\\/base.png)}body{background:0 0;font-size:14px;line-height:22px;font-family:\\"Helvetica Neue\\",helvetica,arial,sans-serif;text-shadow:0 1px 0 #fff}a{color:#0f7096}.button,button{color:#fff;display:inline-block;padding:15px;font-size:20px;text-decoration:none;border:5px solid #fff;border-radius:8px;background-color:#67a749;background-image:linear-gradient(to top,#67a749 0,#67a749 27.76%,#a1c755 100%);text-shadow:0 0 2px rgba(0,0,0,.64)}a.button{padding:5px 15px}h1,h2,h3,h4,h5{font-family:\\"PT Serif\\",helvetica,arial,sans-serif;line-height:28px}h1{font-size:26px}h2{font-size:22px}h3{font-size:18px}h4{font-size:16px}h5{font-size:14px}.header{-moz-box-sizing: border-box;float:left;width:100%;box-sizing:border-box;background:#fff;background:linear-gradient(to bottom,#fff,#f2f2f2);padding:20px;border-bottom:1px solid #fff}.header img{float:left;width:180px;margin:0 5px 0 0}.header h1.main-heading{color:#137899;font-size:32px;line-height:40px}.header-button-wrapper{float:right}.main-heading>span{display:none}.main-heading>sup{color:#ccc;font-weight:400}.content{float:left;padding:30px}.content h2{margin:0;line-height:20px}.content form{margin:10px 0 50px}.content form .column{float:left;box-sizing:border-box;width:500px;margin:20px 0}.column h3{display:inline-block;padding:0 0 5px;margin:0 0 20px;border-bottom:2px solid #000}.column label{float:left;width:100%;clear:both;padding:3px 0}form button{float:left;width:200px;clear:both}label>span{border-bottom:1px dotted #555}label>input{margin:0 5px 0 0}.footer{position:absolute;bottom:20px;right:20px;font-size:10px;color:#ccc}.footer a{color:#aaa}\\r\\n    <\\/style>\\r\\n<\\/head>\\r\\n<body>\\r\\n    <div class=\\"header\\">\\r\\n        <img src=\\"https:\\/\\/cdn.modx.com\\/assets\\/i\\/logos\\/v5\\/svgs\\/modx-color.svg\\" alt=\\"Logo\\">\\r\\n        <h1 class=\\"main-heading\\"><span>MODX<\\/span> UpgradeMODX <\\/h1>\\r\\n        <div class=\\"header-button-wrapper\\">\\r\\n            <a href=\\"https:\\/\\/github.com\\/BobRay\\/UpgradeMODX\\" class=\\"button\\">GitHub<\\/a>\\r\\n        <\\/div>\\r\\n    <\\/div>\\r\\n\\r\\n<div class=\\"content\\">\';\\r\\n    echo \\"\\\\n\\" .  \'<h2>Choose MODX version for Upgrade<\\/h2>\\r\\n    <form>\';\\r\\n    foreach ($ItemGrid as $tree => $item) {\\r\\n        echo \\"\\\\n\\" . \'<div class=\\"column\\">\' .\\r\\n            \\"\\\\n<h3>\\" . strtoupper($tree) . \'<\\/h3>\';\\r\\n        foreach ($item as $version => $itemInfo) {\\r\\n            echo \\"\\\\n    \\" . \'<label><input type=\\"radio\\" name=\\"modx\\" value=\\"\' . $version . \'\\">            <span>\' . $itemInfo[\'name\'] . \'<\\/span><\\/label><br>\';\\r\\n        }\\r\\n        echo \'<\\/div>\';\\r\\n    }\\r\\n    echo \\"\\\\n    \\" . \'<input type=\\"hidden\\" name=\\"userId\\" value=\\"[[+modx.user.id]]\\">\';\\r\\n    if ($method) {\\r\\n        echo \\"\\\\n<h2> Using \\" . $method . \\"<\\/h2>\\";\\r\\n        echo \\"\\\\n\\" . \'<br><button>Upgrade &rarr;<\\/button>\';\\r\\n    } else {\\r\\n        echo \\"\\\\n\\" . \'<h2>Cannot download the files - neither cURL nor allow_url_fopen is enabled on this server.<\\/h2>\';\\r\\n    }\\r\\n    echo \'<\\/form>\' . \\"\\\\n \\" .\\r\\n\'<\\/div>\\r\\n    <div class=\\"footer\\">\\r\\n        <p>Originally created by <a href=\\"http:\\/\\/ga-alex.com\\" title=\\"\\">Bumkaka<\\/a> & <a href=\\"http:\\/\\/dmi3yy.com\\" title=\\"\\">Dmi3yy<\\/a><\\/p>\\r\\n        <p>Modified for Revolution only by <a href=\\"http:\\/\\/sottwell.com\\" title=\\"\\">sottwell<\\/a><\\/p>\\r\\n        <p>Modified for Upgrade only with dashboard widget by <a href=\\"http:\\/\\/bobsguides.com\\" title=\\"\\">BobRay<\\/a><\\/p>\\r\\n        <p>Designed by <a href=\\"http:\\/\\/a-sharapov.com\\" title=\\"\\">Sharapov<\\/a><\\/p>\\r\\n    <\\/div>\\r\\n<\\/body>\\r\\n<\\/html>\\r\\n\';\\r\\n}\\r\\n?>\\r\\n","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"<?php\\r\\n\\r\\n\\/**\\r\\n * UpgradeMODXWidget snippet for UpgradeMODX extra\\r\\n *\\r\\n * Copyright 2015 by Bob Ray <http:\\/\\/bobsguides.com>\\r\\n * Created on 08-16-2015\\r\\n *\\r\\n * UpgradeMODX is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation; either version 2 of the License, or (at your option) any later\\r\\n * version.\\r\\n *\\r\\n * UpgradeMODX is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * UpgradeMODX; if not, write to the Free Software Foundation, Inc., 59 Temple\\r\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package upgrademodx\\r\\n *\\/\\r\\n\\r\\n\\r\\n\\/*\\r\\n * This package was inspired by the work of a number of people and I have borrowed some of their code.\\r\\n * Dmytro Lukianenko (dmi3yy) is the original author of the MODX install script. Susan Sottwell,\\r\\n * Sharapov, Bumkaka, Inreti, Zaigham Rana, frischnetz, and AgelxNash, also contributed and I\'d\\r\\n * like to thank all of them for laying the groundwork.\\r\\n  *\\/\\r\\n\\r\\nerror_reporting(0);\\r\\nini_set(\'display_errors\', 0);\\r\\nset_time_limit(0);\\r\\nini_set(\'max_execution_time\', 0);\\r\\nheader(\'Content-Type: text\\/html; charset=utf-8\');\\r\\n\\r\\nif (extension_loaded(\'xdebug\')) {\\r\\n    ini_set(\'xdebug.max_nesting_level\', 100000);\\r\\n}\\r\\n\\r\\n\\r\\nclass MODXInstaller {\\r\\n    static public function downloadFile($url, $path, $method, $certPath)\\r\\n    {\\r\\n        $newfname = $path;\\r\\n        if (file_exists($path)) {\\r\\n            unlink($path);\\r\\n        }\\r\\n        $newf = null;\\r\\n        $file = null;\\r\\n        if ($method == \'fopen\') {\\r\\n            try {\\r\\n                $file = fopen($url, \\"rb\\");\\r\\n                if ($file) {\\r\\n                    $newf = fopen($newfname, \\"wb\\");\\r\\n                    if ($newf) {\\r\\n                        set_time_limit(0);\\r\\n                        while (!feof($file)) {\\r\\n                            fwrite($newf, fread($file, 1024 * 8), 1024 * 8);\\r\\n                        }\\r\\n                    } else {\\r\\n                        return (\'Could not open \' . $newf . \' for writing\');\\r\\n                    }\\r\\n                } else {\\r\\n                    return (\'fopen failed to open \' . $url);\\r\\n                }\\r\\n            } catch (Exception $e) {\\r\\n                return \'ERROR:Download \' . $e->getMessage();\\r\\n            }\\r\\n            if ($file) {\\r\\n                fclose($file);\\r\\n            }\\r\\n            if ($newf) {\\r\\n                fclose($newf);\\r\\n            }\\r\\n\\r\\n        } elseif ($method == \'curl\') {\\r\\n            $newf = fopen($path, \\"wb\\");\\r\\n            if ($newf) {\\r\\n                set_time_limit(0);\\r\\n                $ch = curl_init(str_replace(\\" \\", \\"%20\\", $url));\\r\\n                curl_setopt($ch, CURLOPT_CAINFO, $certPath);\\r\\n                curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\\r\\n                curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 1);\\r\\n                curl_setopt($ch, CURLOPT_TIMEOUT, 180);\\r\\n                curl_setopt($ch, CURLOPT_USERAGENT, \'Mozilla\\/4.0 (compatible; MSIE 6.0)\');\\r\\n                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\\r\\n                curl_setopt($ch, CURLOPT_FILE, $newf);\\r\\n                $openBasedir = ini_get(\'open_basedir\');\\r\\n                if (empty($openBasedir) && filter_var(ini_get(\'safe_mode\'),\\r\\n                        FILTER_VALIDATE_BOOLEAN) === false) {\\r\\n                    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\\r\\n                } else {\\r\\n                    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, false);\\r\\n                    $rch = curl_copy_handle($ch);\\r\\n                    curl_setopt($rch, CURLOPT_URL, $url);\\r\\n                    $header = curl_exec($rch);\\r\\n                    if (!curl_errno($rch)) {\\r\\n                        $newurl = $url;\\r\\n                        $code = curl_getinfo($rch, CURLINFO_HTTP_CODE);\\r\\n                        if ($code == 301 || $code == 302) {\\r\\n                            if (version_compare(PHP_VERSION, \'5.3.7\') < 0) {\\r\\n                                preg_match(\'\\/Location:(.*?)\\\\n\\/i\', $header, $matches);\\r\\n                                $newurl = trim(array_pop($matches));\\r\\n                            } else {\\r\\n                                $newurl = curl_getinfo($rch, CURLINFO_REDIRECT_URL);\\r\\n                            }\\r\\n                        }\\r\\n                        curl_close($rch);\\r\\n                        curl_setopt($ch, CURLOPT_URL, $newurl);\\r\\n                    }\\r\\n                }\\r\\n                $retVal = curl_exec($ch);\\r\\n                if ($retVal === false) {\\r\\n\\r\\n                    return (\'cUrl download of modx.zip failed \' . curl_error($ch));\\r\\n                }\\r\\n                curl_close($ch);\\r\\n            } else {\\r\\n                return (\'Cannot open \' . $path . \' for writing\');\\r\\n            }\\r\\n        } else {\\r\\n            return \'Invalid method in call to downloadFile()\';\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    static public function removeFolder($path, $removeRoot = true) {\\r\\n        $dir = realpath($path);\\r\\n        if (!is_dir($dir)) {\\r\\n            return;\\r\\n        }\\r\\n        $it = new RecursiveDirectoryIterator($dir);\\r\\n        $files = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::CHILD_FIRST);\\r\\n        foreach ($files as $file) {\\r\\n            if ($file->getFilename() === \'.\' || $file->getFilename() === \'..\') {\\r\\n                continue;\\r\\n            }\\r\\n            if ($file->isDir()) {\\r\\n                rmdir($file->getRealPath());\\r\\n            } else {\\r\\n                unlink($file->getRealPath());\\r\\n            }\\r\\n        }\\r\\n        if ($removeRoot) {\\r\\n            rmdir($dir);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    static public function copyFolder($src, $dest) {\\r\\n\\r\\n        $path = realpath($src);\\r\\n        $dest = realpath($dest);\\r\\n        $objects = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path), RecursiveIteratorIterator::SELF_FIRST);\\r\\n        foreach ($objects as $name => $object) {\\r\\n            $startsAt = substr(dirname($name), strlen($path));\\r\\n            self::mmkDir($dest . $startsAt, true);\\r\\n            if ($object->isDir()) {\\r\\n                self::mmkDir($dest . substr($name, strlen($path)));\\r\\n            }\\r\\n\\r\\n            if (is_writable($dest . $startsAt) and $object->isFile()) {\\r\\n                copy((string)$name, $dest . $startsAt . DIRECTORY_SEPARATOR . basename($name));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    static public function normalize($paths) {\\r\\n        if (is_array($paths)) {\\r\\n            foreach ($paths as $k => $v) {\\r\\n                $v = str_replace(\'\\\\\\\\\', \'\\/\', rtrim($v, \'\\/\\\\\\\\\'));\\r\\n                $paths[$k] = $v;\\r\\n            }\\r\\n        } else {\\r\\n            $paths = str_replace(\'\\\\\\\\\', \'\\/\', rtrim($paths, \'\\/\\\\\\\\\'));\\r\\n        }\\r\\n        return $paths;\\r\\n    }\\r\\n\\r\\n    static public function getDirectories($directories = array()) {\\r\\n        if (empty($directories)) {\\r\\n            $directories = array(\\r\\n                \'setup\' => MODX_BASE_PATH . \'setup\',\\r\\n                \'core\' => MODX_CORE_PATH,\\r\\n                \'manager\' => MODX_MANAGER_PATH,\\r\\n                \'connectors\' => MODX_CONNECTORS_PATH,\\r\\n            );\\r\\n        }\\r\\n        \\/* See if we need to do processors path *\\/\\r\\n        $modxProcessorsPath = MODXInstaller::normalize(MODX_PROCESSORS_PATH);\\r\\n        if (strpos(MODX_PROCESSORS_PATH, \'core\\/model\\/modx\\/processors\') === false) {\\r\\n            $directories[\'core\\/model\\/modx\\/processors\'] = $modxProcessorsPath;\\r\\n        }\\r\\n\\r\\n        \\/* Normalize directory paths *\\/\\r\\n        $directories = MODXInstaller::normalize($directories);\\r\\n\\r\\n        return $directories;\\r\\n\\r\\n    }\\r\\n\\r\\n    static public function copyFiles($sourceDir, $directories) {\\r\\n\\r\\n        \\/* Normalize directory paths *\\/\\r\\n        MODXInstaller::normalize($directories);\\r\\n        MODXInstaller::normalize($sourceDir);\\r\\n\\r\\n        \\/* Copy directories *\\/\\r\\n        foreach ($directories as $source => $target) {\\r\\n            MODXInstaller::mmkDir($target);\\r\\n            set_time_limit(0);\\r\\n            MODXInstaller::copyFolder($sourceDir . \'\\/\' . $source, $target);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    static public function mmkDir($folder, $perm = 0755) {\\r\\n        if (!is_dir($folder)) {\\r\\n            $oldumask = umask(0);\\r\\n            mkdir($folder, $perm, true);\\r\\n            umask($oldumask);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    static public function unZip($corePath, $source, $destination, $forcePclZip = false) {\\r\\n        $status = true;\\r\\n        if ( (! $forcePclZip) && class_exists(\'ZipArchive\', false)) {\\r\\n            $zip = new ZipArchive;\\r\\n            if ($zip instanceof ZipArchive) {\\r\\n                $open = $zip->open($source, ZIPARCHIVE::CHECKCONS);\\r\\n\\r\\n                if ($open == true) {\\r\\n                    $result = $zip->extractTo($destination);\\r\\n                    if ($result === false) {\\r\\n                         \\/* Yes, this is fucking nuts, but it\'s necessary on some platforms *\\/\\r\\n                         $result = $zip->extractTo($destination);\\r\\n                         if ($result === false) {\\r\\n                             $msg = $zip->getStatusString();\\r\\n                             MODXInstaller::quit($msg);\\r\\n                         }\\r\\n                    }\\r\\n                    $zip->close();\\r\\n                } else {\\r\\n                    $status = \'Could not open ZipArchive \' . $source . \' \' . $zip->getStatusString();\\r\\n                }\\r\\n\\r\\n            } else {\\r\\n                $status = \'Could not instantiate ZipArchive\';\\r\\n            }\\r\\n        } else {\\r\\n            $zipClass = $corePath . \'xpdo\\/compression\\/pclzip.lib.php\';\\r\\n            if (file_exists($zipClass)) {\\r\\n                include $corePath . \'xpdo\\/compression\\/pclzip.lib.php\';\\r\\n                $archive = new PclZip($source);\\r\\n                if ($archive->extract(PCLZIP_OPT_PATH, $destination) == 0) {\\r\\n                    $status = \'Extraction with PclZip failed - Error : \' . $archive->errorInfo(true);\\r\\n                }\\r\\n            } else {\\r\\n                $status = \'Neither ZipArchive, nor PclZip were available to unzip the archive\';\\r\\n            }\\r\\n        }\\r\\n        return $status;\\r\\n    }\\r\\n\\r\\n\\r\\n    \\/**\\r\\n     * Get name of downloaded MODX directory (e.g., modx-3.4.0-pl).\\r\\n     *\\r\\n     * @param $tempDir string - temporary download directory\\r\\n     * @return string - Name of directory\\r\\n     *\\/\\r\\n    public static function getModxDir($tempDir) {\\r\\n        $handle = opendir($tempDir);\\r\\n        if ($handle !== false) {\\r\\n            while (false !== ($name = readdir($handle))) {\\r\\n                if ($name != \\".\\" && $name != \\"..\\") {\\r\\n                    $dir = $name;\\r\\n                }\\r\\n            }\\r\\n            closedir($handle);\\r\\n        } else {\\r\\n            MODXInstaller::quit (\'Unable to read directory contents or directory is empty: \' . dirname(__FILE__) . \'\\/temp\');\\r\\n        }\\r\\n\\r\\n        if (empty($dir)) {\\r\\n            MODXInstaller::quit(\'Unknown error reading \\/temp directory\');\\r\\n        }\\r\\n\\r\\n        return $dir;\\r\\n    }\\r\\n\\r\\n    public static function quit($msg) {\\r\\n        $begin = \'<div style=\\"margin:auto;margin-top:100px;width:40%;height:80px;padding:30px;color:red;border:3px solid darkgray;text-align:center;background-color:rgba(160, 233, 174, 0.42);border-radius:15px;box-shadow: 10px 10px 5px #888888;\\"><p style=\\"font-size: 14pt;\\">\';\\r\\n        $end = \'<\\/p><p style=\\"margin-bottom:120px;\\"><a href=\\"\' . MODX_MANAGER_URL . \'\\">Back to Manager<\\/a><\\/p><\\/div>\';\\r\\n        die($begin . $msg  . $end);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\/* Do not touch the following comments! You have been warned!  *\\/\\r\\n\\/** @var $forcePclZip bool - force the use of PclZip instead of ZipArchive *\\/\\r\\n\\/* [[+ForcePclZip]] *\\/\\r\\n\\/* [[+ForceFopen]] *\\/\\r\\n\\/* [[+InstallData]] *\\/\\r\\n\\r\\n$method = 0;\\r\\nif (extension_loaded(\'curl\') && (!$forceFopen)) {\\r\\n    $method = \'curl\';\\r\\n} elseif (ini_get(\'allow_url_fopen\')) {\\r\\n    $method = \'fopen\';\\r\\n}\\r\\n\\r\\n\\/* Next two lines for running in debugger  *\\/\\r\\n\\/\\/ if (true || !empty($_GET[\'modx\']) && is_scalar($_GET[\'modx\']) && isset($InstallData[$_GET[\'modx\']])) {\\r\\n\\/\\/       $rowInstall = $InstallData[\'revo2.4.1-pl\'];\\r\\n\\/\\/ Comment our the two lines below to run in debugger.\\r\\n\\r\\n\\r\\n   if (!empty($_GET[\'modx\']) && is_scalar($_GET[\'modx\']) && isset($InstallData[$_GET[\'modx\']])) {\\r\\n       $rowInstall = $InstallData[$_GET[\'modx\']];\\r\\n\\r\\n    if (file_exists(\'config.core.php\')) {\\r\\n        @include \'config.core.php\';\\r\\n    }\\r\\n    if (!defined(\'MODX_CORE_PATH\')) {\\r\\n        MODXInstaller::quit(\'Could not read config.core.php\');\\r\\n    }\\r\\n\\r\\n    @include MODX_CORE_PATH . \'config\\/\' . MODX_CONFIG_KEY . \'.inc.php\';\\r\\n\\r\\n    if (!defined(\'MODX_CONNECTORS_PATH\')) {\\r\\n        MODXInstaller::quit (\'Could not read main config file\');\\r\\n    }\\r\\n\\r\\n\\r\\n    \\/* run unzip and install *\\/\\r\\n    $source = dirname(__FILE__) . \\"\\/modx.zip\\";\\r\\n    $url = $rowInstall[\'link\'];\\r\\n    $certPath = MODX_CORE_PATH . \'components\\/upgrademodx\\/cacert.pem\';\\r\\n    if (! file_exists($certPath)) {\\r\\n        MODXInstaller::quit(\'Could not find cacert.pem\');\\r\\n    }\\r\\n    set_time_limit(0);\\r\\n\\r\\n    $success = MODXInstaller::downloadFile($url, $source, $method, $certPath);\\r\\n\\r\\n    \\/* Make sure we have the downloaded file *\\/\\r\\n\\r\\n    if ($success !== true) {\\r\\n        MODXInstaller::quit($success);\\r\\n    } elseif (!file_exists($source)) {\\r\\n            MODXInstaller::quit (\'Missing file: \' . $source);\\r\\n    } elseif (filesize($source) < 64) {\\r\\n        MODXInstaller::quit(\'File: \' . $source . \' is empty -- download failed\');\\r\\n    }\\r\\n\\r\\n    $tempDir = realPath(dirname(__FILE__)) . \'\\/ugmtemp\';\\r\\n    MODXInstaller::mmkdir($tempDir);\\r\\n    clearstatcache();\\r\\n\\r\\n    $destination = $tempDir;\\r\\n\\r\\n    if (! file_exists($tempDir)) {\\r\\n        MODXInstaller::quit(\'Unable to create directory: \' . $tempDir);\\r\\n    }\\r\\n\\r\\n    if (! is_readable($tempDir)) {\\r\\n        MODXInstaller::quit(\'Unable to read from \\/ugmtemp directory\');\\r\\n    }\\r\\n    set_time_limit(0);\\r\\n    $success = MODXInstaller::unZip(MODX_CORE_PATH, $source, $destination, $forcePclZip);\\r\\n    if ($success !== true) {\\r\\n        MODXInstaller::quit($success);\\r\\n    }\\r\\n\\r\\n\\r\\n    $directories = MODXInstaller::getDirectories();\\r\\n\\r\\n    $directories = MODXInstaller::normalize($directories);\\r\\n\\r\\n    $sourceDir = $tempDir . \'\\/\' . MODXInstaller::getModxDir($tempDir);\\r\\n    $sourceDir = MODXInstaller::normalize($sourceDir);\\r\\n\\r\\n    MODXInstaller::copyFiles($sourceDir, $directories);\\r\\n\\r\\n    unlink($source);\\r\\n\\r\\n    if (! is_dir(MODX_BASE_PATH . \'setup\')) {\\r\\n        MODXInstaller::quit(\'File Copy Failed\');\\r\\n    }\\r\\n\\r\\n    MODXInstaller::removeFolder($tempDir, true);\\r\\n\\r\\n    \\/* Clear cache files but not cache folder *\\/\\r\\n\\r\\n    $path = MODX_CORE_PATH . \'cache\';\\r\\n    if (is_dir($path)) {\\r\\n        MODXInstaller::removeFolder($path, false);\\r\\n    }\\r\\n\\r\\n    unlink(basename(__FILE__));\\r\\n\\r\\n    \\/* Log upgrade in Manager Actions log *\\/\\r\\n    include MODX_CORE_PATH . \'model\\/modx\\/modx.class.php\';\\r\\n\\r\\n    $modx = new modX();\\r\\n    $modx->initialize(\'web\');\\r\\n    $modx->lexicon->load(\'core:default\');\\r\\n    $modx->logManagerAction(\'Upgrade MODX\',\'modWorkspace\', $modx->lexicon(\'version\') . \' \' . $_GET[\'modx\'], $_GET[\'userId\'] );\\r\\n    $modx = null;\\r\\n\\r\\n    \\/* Forward to Setup *\\/\\r\\n    header(\'Location: \' . $rowInstall[\'location\']);\\r\\n\\r\\n} else {\\r\\n    $ItemGrid = array();\\r\\n    foreach ($InstallData as $ver => $item) {\\r\\n        $ItemGrid[$item[\'tree\']][$ver] = $item;\\r\\n    }\\r\\n\\r\\n\\/* Display the Form *\\/\\r\\n    echo \'\\r\\n<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n    <title>UpgradeMODX<\\/title>\\r\\n    <meta charset=\\"utf-8\\">\\r\\n    <style type=\\"text\\/css\\">\\r\\n        @import url(https:\\/\\/fonts.googleapis.com\\/css?family=PT+Serif:400,700&subset=latin,cyrillic);article,aside,audio,b,body,canvas,dd,details,div,dl,dt,em,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,img,label,li,mark,menu,nav,ol,p,section,span,strong,summary,table,tbody,td,tfoot,th,thead,time,tr,u,ul,video{margin:0;padding:0;border:0;outline:0;vertical-align:baseline;background:0 0;font-size:100%}a{margin:0;padding:0;font-size:100%;vertical-align:baseline;background:0 0}table{border-collapse:collapse;border-spacing:0}td,td img{vertical-align:top}button,input,select,textarea{margin:0;font-size:100%}input[type=password],input[type=text],textarea{padding:0}input[type=checkbox]{vertical-align:bottom}input[type=radio]{vertical-align:text-bottom}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}html{overflow-y:scroll}body{color:#111;text-align:left;font:12px Verdana,\\"Geneva CY\\",\\"DejaVu Sans\\",sans-serif}button,input,select,textarea{font-family:Verdana,\\"Geneva CY\\",\\"DejaVu Sans\\",sans-serif}a,a:active,a:focus,a:hover,a:visited,button,input[type=button],input[type=submit],label{cursor:pointer}::selection{background:#84d5e8;color:#fff;text-shadow:none}html{position:relative;background:#f8f8f8 url(http:\\/\\/installer.evolution-cms.com\\/img\\/base.png)}body{background:0 0;font-size:14px;line-height:22px;font-family:\\"Helvetica Neue\\",helvetica,arial,sans-serif;text-shadow:0 1px 0 #fff}a{color:#0f7096}.button,button{color:#fff;display:inline-block;padding:15px;font-size:20px;text-decoration:none;border:5px solid #fff;border-radius:8px;background-color:#67a749;background-image:linear-gradient(to top,#67a749 0,#67a749 27.76%,#a1c755 100%);text-shadow:0 0 2px rgba(0,0,0,.64)}a.button{padding:5px 15px}h1,h2,h3,h4,h5{font-family:\\"PT Serif\\",helvetica,arial,sans-serif;line-height:28px}h1{font-size:26px}h2{font-size:22px}h3{font-size:18px}h4{font-size:16px}h5{font-size:14px}.header{-moz-box-sizing: border-box;float:left;width:100%;box-sizing:border-box;background:#fff;background:linear-gradient(to bottom,#fff,#f2f2f2);padding:20px;border-bottom:1px solid #fff}.header img{float:left;width:180px;margin:0 5px 0 0}.header h1.main-heading{color:#137899;font-size:32px;line-height:40px}.header-button-wrapper{float:right}.main-heading>span{display:none}.main-heading>sup{color:#ccc;font-weight:400}.content{float:left;padding:30px}.content h2{margin:0;line-height:20px}.content form{margin:10px 0 50px}.content form .column{float:left;box-sizing:border-box;width:500px;margin:20px 0}.column h3{display:inline-block;padding:0 0 5px;margin:0 0 20px;border-bottom:2px solid #000}.column label{float:left;width:100%;clear:both;padding:3px 0}form button{float:left;width:200px;clear:both}label>span{border-bottom:1px dotted #555}label>input{margin:0 5px 0 0}.footer{position:absolute;bottom:20px;right:20px;font-size:10px;color:#ccc}.footer a{color:#aaa}\\r\\n    <\\/style>\\r\\n<\\/head>\\r\\n<body>\\r\\n    <div class=\\"header\\">\\r\\n        <img src=\\"https:\\/\\/cdn.modx.com\\/assets\\/i\\/logos\\/v5\\/svgs\\/modx-color.svg\\" alt=\\"Logo\\">\\r\\n        <h1 class=\\"main-heading\\"><span>MODX<\\/span> UpgradeMODX <\\/h1>\\r\\n        <div class=\\"header-button-wrapper\\">\\r\\n            <a href=\\"https:\\/\\/github.com\\/BobRay\\/UpgradeMODX\\" class=\\"button\\">GitHub<\\/a>\\r\\n        <\\/div>\\r\\n    <\\/div>\\r\\n\\r\\n<div class=\\"content\\">\';\\r\\n    echo \\"\\\\n\\" .  \'<h2>Choose MODX version for Upgrade<\\/h2>\\r\\n    <form>\';\\r\\n    foreach ($ItemGrid as $tree => $item) {\\r\\n        echo \\"\\\\n\\" . \'<div class=\\"column\\">\' .\\r\\n            \\"\\\\n<h3>\\" . strtoupper($tree) . \'<\\/h3>\';\\r\\n        foreach ($item as $version => $itemInfo) {\\r\\n            echo \\"\\\\n    \\" . \'<label><input type=\\"radio\\" name=\\"modx\\" value=\\"\' . $version . \'\\">            <span>\' . $itemInfo[\'name\'] . \'<\\/span><\\/label><br>\';\\r\\n        }\\r\\n        echo \'<\\/div>\';\\r\\n    }\\r\\n    echo \\"\\\\n    \\" . \'<input type=\\"hidden\\" name=\\"userId\\" value=\\"[[+modx.user.id]]\\">\';\\r\\n    if ($method) {\\r\\n        echo \\"\\\\n<h2> Using \\" . $method . \\"<\\/h2>\\";\\r\\n        echo \\"\\\\n\\" . \'<br><button>Upgrade &rarr;<\\/button>\';\\r\\n    } else {\\r\\n        echo \\"\\\\n\\" . \'<h2>Cannot download the files - neither cURL nor allow_url_fopen is enabled on this server.<\\/h2>\';\\r\\n    }\\r\\n    echo \'<\\/form>\' . \\"\\\\n \\" .\\r\\n\'<\\/div>\\r\\n    <div class=\\"footer\\">\\r\\n        <p>Originally created by <a href=\\"http:\\/\\/ga-alex.com\\" title=\\"\\">Bumkaka<\\/a> & <a href=\\"http:\\/\\/dmi3yy.com\\" title=\\"\\">Dmi3yy<\\/a><\\/p>\\r\\n        <p>Modified for Revolution only by <a href=\\"http:\\/\\/sottwell.com\\" title=\\"\\">sottwell<\\/a><\\/p>\\r\\n        <p>Modified for Upgrade only with dashboard widget by <a href=\\"http:\\/\\/bobsguides.com\\" title=\\"\\">BobRay<\\/a><\\/p>\\r\\n        <p>Designed by <a href=\\"http:\\/\\/a-sharapov.com\\" title=\\"\\">Sharapov<\\/a><\\/p>\\r\\n    <\\/div>\\r\\n<\\/body>\\r\\n<\\/html>\\r\\n\';\\r\\n}\\r\\n?>\\r\\n"}',
        'guid' => '578af3d66fabdd1c0c0890fbad5bce4c',
        'native_key' => 1,
        'signature' => '7adec28587102dee2582216c715e2c7c',
      ),
      'f7341216532732c983ad180049709144' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"UpgradeMODXTpl","description":"Tpl chunk for alert widget","editor_type":0,"category":0,"cache_type":0,"snippet":"<h3 style=\\"color:[[+ugm_notice_color]]\\">[[+ugm_notice]]<\\/h3>\\r\\n<br\\/>[[+ugm_current_version_caption]]: [[+ugm_current_version]]\\r\\n<br\\/>[[+ugm_latest_version_caption]]: [[+ugm_latest_version]]\\r\\n\\r\\n[[+ugm_logout_note]]\\r\\n[[+ugm_form]]\\r\\n[[+ugm_errors]]\\r\\n<p>&nbsp;<\\/p>\\r\\n\\r\\n","locked":0,"properties":null,"static":0,"static_file":"","content":"<h3 style=\\"color:[[+ugm_notice_color]]\\">[[+ugm_notice]]<\\/h3>\\r\\n<br\\/>[[+ugm_current_version_caption]]: [[+ugm_current_version]]\\r\\n<br\\/>[[+ugm_latest_version_caption]]: [[+ugm_latest_version]]\\r\\n\\r\\n[[+ugm_logout_note]]\\r\\n[[+ugm_form]]\\r\\n[[+ugm_errors]]\\r\\n<p>&nbsp;<\\/p>\\r\\n\\r\\n"}',
        'guid' => '53ff5a282e2bb54d62d5af2e55718660',
        'native_key' => 2,
        'signature' => 'bb8cd90d6a210827732853dd3fde936e',
      ),
    ),
    'Snippets' => 
    array (
      '284f9f9d2efc592df555aab0ed3cb044' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"UpgradeMODXWidget","description":"Upgrade MODX Dashboard widget","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * UpgradeMODXWidget snippet for UpgradeMODX extra\\n *\\n * Copyright 2015 by Bob Ray <http:\\/\\/bobsguides.com>\\n * Created on 08-16-2015\\n *\\n * UpgradeMODX is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * UpgradeMODX is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * UpgradeMODX; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package upgrademodx\\n *\\/\\n\\n\\/**\\n * Description\\n * -----------\\n * UpgradeMODX Dashboard widget\\n * This package was inspired by the work of a number of people and I have borrowed some of their code.\\n * Dmytro Lukianenko (dmi3yy) is the original author of the MODX install script. Susan Sottwell, Sharapov,\\n * Bumkaka, Inreti, Zaigham Rana, frischnetz, and AgelxNash, also contributed and I\'d like to thank all\\n * of them for laying the groundwork.\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package upgrademodx\\n **\\/\\n\\n\\/* Properties\\n\\n * @property &groups textfield -- group, or commma-separated list of groups, who will see the widget; Default: (empty)..\\n * @property &hideWhenNoUpgrade combo-boolean -- Hide widget when no upgrade is available; Default: No.\\n * @property &interval textfield -- Interval between checks -- Examples: 1 week, 3 days, 6 hours; Default: 1 week.\\n * @property &language textfield -- Two-letter code of language to user; Default: en.\\n * @property &lastCheck textfield -- Date and time of last check -- set automatically; Default: (empty)..\\n * @property &latestVersion textfield -- Latest version (at last check) -- set automatically; Default: (empty)..\\n * @property &plOnly combo-boolean -- Show only pl (stable) versions; Default: yes.\\n * @property &versionsToShow textfield -- Number of versions to show in upgrade form (not widget); Default: 5.\\n\\n *\\/\\n\\n\\/** recursive remove dir function.\\n *  Removes a directory and all its children *\\/\\n\\nfunction rrmdir($dir) {\\n    if (is_dir($dir)) {\\n        $objects = scandir($dir);\\n        foreach ($objects as $object) {\\n            if ($object != \\".\\" && $object != \\"..\\") {\\n                if (filetype($dir . \\"\\/\\" . $object) == \\"dir\\") {\\n                    $prefix = substr($object, 0, 4);\\n                    $this->rrmdir($dir . \\"\\/\\" . $object);\\n                } else {\\n                    $prefix = substr($object, 0, 4);\\n                    if ($prefix != \'.git\' && $prefix != \'.svn\') {\\n                        @unlink($dir . \\"\\/\\" . $object);\\n                    }\\n                }\\n            }\\n        }\\n        reset($objects);\\n        $success = @rmdir($dir);\\n    }\\n}\\n\\n\\nif (php_sapi_name() === \'cli\') {\\n    \\/* This section for debugging during development. It won\'t execute in MODX *\\/\\n    include \'C:\\\\xampp\\\\htdocs\\\\addons\\\\assets\\\\mycomponents\\\\instantiatemodx\\\\instantiatemodx.php\';\\n    $snippet =\\n    $scriptProperties = array(\\n        \'versionsToShow\' => 5,\\n        \'hideWhenNoUpgrade\' => false,\\n        \'lastCheck\' => \'\',\\n        \'interval\' => \'+60 seconds\',\\n        \'plOnly\' => false,\\n        \'language\' => \'en\',\\n        \'forcePclZip\' => false,\\n        \'forceFopen\' => false,\\n        \'currentVersion\' => $modx->getOption(\'settings_version\'),\\n        \'latestVersion\' => \'2.4.3-pl\',\\n        \'githubTimeout\' => 6,\\n        \'modTimeout\' => 6,\\n        \'tries\' => 2,\\n    );\\n\\n} else {\\n    \\/* This will execute when in MODX *\\/\\n    $language = $modx->getOption(\'language\', $scriptProperties, \'en\', true);\\n    $modx->lexicon->load($language . \':upgrademodx:default\');\\n    \\/* Return empty string if user shouldn\'t see widget *\\/\\n\\n    $groups = $modx->getOption(\'groups\', $scriptProperties, \'Administrator\', true);\\n    if (strpos($groups, \',\') !== false) {\\n        $groups = explode(\',\', $groups);\\n    }\\n    if (! $modx->user->isMember($groups)) {\\n        return \'\';\\n    }\\n}\\n\\n$props = $scriptProperties;\\n$corePath = $modx->getOption(\'ugm.core_path\', $props, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/upgrademodx\\/\');\\n\\nrequire_once($corePath . \'model\\/upgrademodx.class.php\');\\n\\n\\n$upgrade = new UpgradeMODX($modx);\\n$upgrade->init($props);\\n\\n\\/* See if user has submitted the form. If so, create the upgrade script and launch it *\\/\\nif (isset($_POST[\'UpgradeMODX\'])) {\\n    $upgrade->writeScriptFile();\\n    \\/* Log out all users before launching the form *\\/\\n    $sessionTable = $modx->getTableName(\'modSession\');\\n    if ($modx->query(\\"TRUNCATE TABLE {$sessionTable}\\") == false) {\\n        $flushed = false;\\n    } else {\\n        $modx->user->endSession();\\n    }\\n    $modx->sendRedirect(MODX_BASE_URL . \'upgrade.php\');\\n\\n}\\n\\n\\/* Set the method *\\/\\n$forceFopen = $modx->getOption(\'forceFopen\', $props, false, true);\\n$method = null;\\nif (extension_loaded(\'curl\') && (!$forceFopen)) {\\n    $method = \'curl\';\\n} elseif (ini_get(\'allow_url_fopen\')) {\\n    $method = \'fopen\';\\n} else {\\n    die($this->modx->lexicon(\'ugm_no_curl_no_fopen\'));\\n}\\n\\n$lastCheck = $modx->getOption(\'lastCheck\', $props, \'2015-08-17 00:00:004\', true);\\n$interval = $modx->getOption(\'interval\', $props, \'+1 week\', true);\\n$interval = \'+1 week\';\\n$hideWhenNoUpgrade = $modx->getOption(\'hideWhenNoUpgrade\', $props, false, true);\\n$plOnly = $modx->getOption(\'plOnly\', $props);\\n$versionsToShow = $modx->getOption(\'versionsToShow\', $props, 5);\\n$currentVersion = $modx->getOption(\'settings_version\');\\n$latestVersion = $modx->getOption(\'latestVersion\', $props, \'\', true);\\n$versionListPath = $upgrade->getVersionListPath();\\n\\n$versionListExists = false;\\n\\n$fullVersionListPath = $versionListPath . \'versionlist\';\\nif (file_exists($fullVersionListPath)) {\\n    $v = file_get_contents($fullVersionListPath);\\n    if (! empty($v)) {\\n        $versionListExists = true;\\n    }\\n}\\n\\n$timeToCheck = $upgrade->timeToCheck($lastCheck, $interval);\\n\\/* Perform check if no versionlist or latestVersion, or if it\'s time to check *\\/\\nif ((!$versionListExists ) || $timeToCheck || empty($latestVersion)) {\\n    $upgradeAvailable = $upgrade->upgradeAvailable($currentVersion, $plOnly, $versionsToShow, $method);\\n    $latestVersion = $upgrade->getLatestVersion();\\n} else {\\n    $upgradeAvailable = version_compare($currentVersion, $latestVersion) < 0;;\\n}\\n$placeholders = array();\\n$placeholders[\'[[+ugm_current_version]]\'] = $currentVersion;\\n$placeholders[\'[[+ugm_latest_version]]\'] = $latestVersion;\\n\\n$errors = $upgrade->getErrors();\\n\\nif (!empty($errors)) {\\n    $msg = \'\';\\n    foreach ($errors as $error) {\\n        $msg .= \'<br\\/><span style=\\"color:red\\">\' . $modx->lexicon(\'ugm_error\') .\\n            \': \' . $error . \'<\\/span>\';\\n    }\\n\\n    \\/* attempt to delete any files created *\\/\\n    rrmdir(MODX_BASE_PATH . \'ugmtemp\');\\n\\n    if (file_exists(MODX_BASE_PATH . \'modx.zip\')) {\\n        @unlink(MODX_BASE_PATH . \'modx.zip\');\\n    }\\n    if (file_exists(MODX_BASE_PATH . \'upgrade.php\')) {\\n        @unlink(MODX_BASE_PATH . \'upgrade.php\');\\n    }\\n\\n\\n    return $msg;\\n}\\n\\n$placeholders[\'[[+ugm_current_version_caption]]\'] = $modx->lexicon(\'ugm_current_version_caption\');\\n$placeholders[\'[[+ugm_latest_version_caption]]\'] = $modx->lexicon(\'ugm_latest_version_caption\');\\n\\n\\/* See if there\'s a new version and if it\'s downloadable *\\/\\nif ($upgradeAvailable) {\\n    $placeholders[\'[[+ugm_notice]]\'] = $modx->lexicon(\'ugm_upgrade_available\');\\n    $placeholders[\'[[+ugm_notice_color]]\'] = \'green\';\\n    $placeholders[\'[[+ugm_logout_note]]\'] = \'<br\\/><br\\/>(\' .\\n        $modx->lexicon(\'ugm_logout_note\')\\n        . \')\';\\n    $placeholders[\'[[+ugm_form]]\'] = \'<br\\/><br\\/>\\n        <form method=\\"post\\" action=\\"\\">\\n           <input class=\\"x-btn x-btn-small x-btn-icon-small-left primary-button x-btn-noicon\\"\\n                    type=\\"submit\\" name=\\"UpgradeMODX\\" value=\\"\' . $modx->lexicon(\'ugm_upgrade_modx\') .  \'\\">\\n        <\\/form>\';\\n\\n} else {\\n    if ($hideWhenNoUpgrade) {\\n        return \'\';\\n    } else {\\n        $placeholders[\'[[+ugm_notice]]\'] = $modx->lexicon(\'ugm_modx_up_to_date\');\\n        $placeholders[\'[[+ugm_notice_color]]\'] = \'gray\';\\n    }\\n}\\n\\n\\/* Get Tpl *\\/\\n\\n$tpl = $modx->getChunk(\'UpgradeMODXTpl\');\\n\\n\\/* Do the replacements *\\/\\n$tpl = str_replace(array_keys($placeholders), array_values($placeholders), $tpl);\\n\\nif (php_sapi_name() === \'cli\') {\\n    echo $tpl;\\n}\\n\\nreturn $tpl;","locked":0,"properties":"a:17:{s:8:\\"attempts\\";a:7:{s:4:\\"name\\";s:8:\\"attempts\\";s:4:\\"desc\\";s:17:\\"ubm_attempts_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"2\\";s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:8:\\"Download\\";}s:10:\\"forceFopen\\";a:7:{s:4:\\"name\\";s:10:\\"forceFopen\\";s:4:\\"desc\\";s:19:\\"ugm_forceFopen_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:8:\\"Download\\";}s:11:\\"forcePclZip\\";a:7:{s:4:\\"name\\";s:11:\\"forcePclZip\\";s:4:\\"desc\\";s:20:\\"ugm_forcePclZip_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:8:\\"Download\\";}s:11:\\"modxTimeout\\";a:7:{s:4:\\"name\\";s:11:\\"modxTimeout\\";s:4:\\"desc\\";s:21:\\"ugm_modx_timeout_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"6\\";s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:8:\\"Download\\";}s:15:\\"ssl_verify_peer\\";a:7:{s:4:\\"name\\";s:15:\\"ssl_verify_peer\\";s:4:\\"desc\\";s:24:\\"ugm_ssl_verify_peer_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:8:\\"Download\\";}s:8:\\"language\\";a:7:{s:4:\\"name\\";s:8:\\"language\\";s:4:\\"desc\\";s:17:\\"ugm_language_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:2:\\"en\\";s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:4:\\"Form\\";}s:6:\\"plOnly\\";a:7:{s:4:\\"name\\";s:6:\\"plOnly\\";s:4:\\"desc\\";s:15:\\"ugm_plOnly_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:4:\\"Form\\";}s:14:\\"versionsToShow\\";a:7:{s:4:\\"name\\";s:14:\\"versionsToShow\\";s:4:\\"desc\\";s:23:\\"ugm_versionsToShow_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"5\\";s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:4:\\"Form\\";}s:13:\\"githubTimeout\\";a:7:{s:4:\\"name\\";s:13:\\"githubTimeout\\";s:4:\\"desc\\";s:23:\\"ugm_github_timeout_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:1:\\"6\\";s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:6:\\"GitHub\\";}s:12:\\"github_token\\";a:7:{s:4:\\"name\\";s:12:\\"github_token\\";s:4:\\"desc\\";s:21:\\"ugm_github_token_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:6:\\"GitHub\\";}s:15:\\"github_username\\";a:7:{s:4:\\"name\\";s:15:\\"github_username\\";s:4:\\"desc\\";s:24:\\"ugm_github_username_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:6:\\"GitHub\\";}s:6:\\"groups\\";a:7:{s:4:\\"name\\";s:6:\\"groups\\";s:4:\\"desc\\";s:15:\\"ugm_groups_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:13:\\"Administrator\\";s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:8:\\"Security\\";}s:17:\\"hideWhenNoUpgrade\\";a:7:{s:4:\\"name\\";s:17:\\"hideWhenNoUpgrade\\";s:4:\\"desc\\";s:26:\\"ugm_hideWhenNoUpgrade_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:6:\\"Widget\\";}s:8:\\"interval\\";a:7:{s:4:\\"name\\";s:8:\\"interval\\";s:4:\\"desc\\";s:17:\\"ugm_interval_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:6:\\"1 week\\";s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:6:\\"Widget\\";}s:9:\\"lastCheck\\";a:7:{s:4:\\"name\\";s:9:\\"lastCheck\\";s:4:\\"desc\\";s:18:\\"ugm_lastCheck_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:6:\\"Widget\\";}s:13:\\"latestVersion\\";a:7:{s:4:\\"name\\";s:13:\\"latestVersion\\";s:4:\\"desc\\";s:22:\\"ugm_latestVersion_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:8:\\"2.5.4-pl\\";s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:6:\\"Widget\\";}s:15:\\"versionListPath\\";a:7:{s:4:\\"name\\";s:15:\\"versionListPath\\";s:4:\\"desc\\";s:26:\\"ugm_version_list_path_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:29:\\"{core_path}cache\\/upgrademodx\\/\\";s:7:\\"lexicon\\";s:22:\\"upgrademodx:properties\\";s:4:\\"area\\";s:6:\\"Widget\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * UpgradeMODXWidget snippet for UpgradeMODX extra\\n *\\n * Copyright 2015 by Bob Ray <http:\\/\\/bobsguides.com>\\n * Created on 08-16-2015\\n *\\n * UpgradeMODX is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * UpgradeMODX is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * UpgradeMODX; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package upgrademodx\\n *\\/\\n\\n\\/**\\n * Description\\n * -----------\\n * UpgradeMODX Dashboard widget\\n * This package was inspired by the work of a number of people and I have borrowed some of their code.\\n * Dmytro Lukianenko (dmi3yy) is the original author of the MODX install script. Susan Sottwell, Sharapov,\\n * Bumkaka, Inreti, Zaigham Rana, frischnetz, and AgelxNash, also contributed and I\'d like to thank all\\n * of them for laying the groundwork.\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package upgrademodx\\n **\\/\\n\\n\\/* Properties\\n\\n * @property &groups textfield -- group, or commma-separated list of groups, who will see the widget; Default: (empty)..\\n * @property &hideWhenNoUpgrade combo-boolean -- Hide widget when no upgrade is available; Default: No.\\n * @property &interval textfield -- Interval between checks -- Examples: 1 week, 3 days, 6 hours; Default: 1 week.\\n * @property &language textfield -- Two-letter code of language to user; Default: en.\\n * @property &lastCheck textfield -- Date and time of last check -- set automatically; Default: (empty)..\\n * @property &latestVersion textfield -- Latest version (at last check) -- set automatically; Default: (empty)..\\n * @property &plOnly combo-boolean -- Show only pl (stable) versions; Default: yes.\\n * @property &versionsToShow textfield -- Number of versions to show in upgrade form (not widget); Default: 5.\\n\\n *\\/\\n\\n\\/** recursive remove dir function.\\n *  Removes a directory and all its children *\\/\\n\\nfunction rrmdir($dir) {\\n    if (is_dir($dir)) {\\n        $objects = scandir($dir);\\n        foreach ($objects as $object) {\\n            if ($object != \\".\\" && $object != \\"..\\") {\\n                if (filetype($dir . \\"\\/\\" . $object) == \\"dir\\") {\\n                    $prefix = substr($object, 0, 4);\\n                    $this->rrmdir($dir . \\"\\/\\" . $object);\\n                } else {\\n                    $prefix = substr($object, 0, 4);\\n                    if ($prefix != \'.git\' && $prefix != \'.svn\') {\\n                        @unlink($dir . \\"\\/\\" . $object);\\n                    }\\n                }\\n            }\\n        }\\n        reset($objects);\\n        $success = @rmdir($dir);\\n    }\\n}\\n\\n\\nif (php_sapi_name() === \'cli\') {\\n    \\/* This section for debugging during development. It won\'t execute in MODX *\\/\\n    include \'C:\\\\xampp\\\\htdocs\\\\addons\\\\assets\\\\mycomponents\\\\instantiatemodx\\\\instantiatemodx.php\';\\n    $snippet =\\n    $scriptProperties = array(\\n        \'versionsToShow\' => 5,\\n        \'hideWhenNoUpgrade\' => false,\\n        \'lastCheck\' => \'\',\\n        \'interval\' => \'+60 seconds\',\\n        \'plOnly\' => false,\\n        \'language\' => \'en\',\\n        \'forcePclZip\' => false,\\n        \'forceFopen\' => false,\\n        \'currentVersion\' => $modx->getOption(\'settings_version\'),\\n        \'latestVersion\' => \'2.4.3-pl\',\\n        \'githubTimeout\' => 6,\\n        \'modTimeout\' => 6,\\n        \'tries\' => 2,\\n    );\\n\\n} else {\\n    \\/* This will execute when in MODX *\\/\\n    $language = $modx->getOption(\'language\', $scriptProperties, \'en\', true);\\n    $modx->lexicon->load($language . \':upgrademodx:default\');\\n    \\/* Return empty string if user shouldn\'t see widget *\\/\\n\\n    $groups = $modx->getOption(\'groups\', $scriptProperties, \'Administrator\', true);\\n    if (strpos($groups, \',\') !== false) {\\n        $groups = explode(\',\', $groups);\\n    }\\n    if (! $modx->user->isMember($groups)) {\\n        return \'\';\\n    }\\n}\\n\\n$props = $scriptProperties;\\n$corePath = $modx->getOption(\'ugm.core_path\', $props, $modx->getOption(\'core_path\', null, MODX_CORE_PATH) . \'components\\/upgrademodx\\/\');\\n\\nrequire_once($corePath . \'model\\/upgrademodx.class.php\');\\n\\n\\n$upgrade = new UpgradeMODX($modx);\\n$upgrade->init($props);\\n\\n\\/* See if user has submitted the form. If so, create the upgrade script and launch it *\\/\\nif (isset($_POST[\'UpgradeMODX\'])) {\\n    $upgrade->writeScriptFile();\\n    \\/* Log out all users before launching the form *\\/\\n    $sessionTable = $modx->getTableName(\'modSession\');\\n    if ($modx->query(\\"TRUNCATE TABLE {$sessionTable}\\") == false) {\\n        $flushed = false;\\n    } else {\\n        $modx->user->endSession();\\n    }\\n    $modx->sendRedirect(MODX_BASE_URL . \'upgrade.php\');\\n\\n}\\n\\n\\/* Set the method *\\/\\n$forceFopen = $modx->getOption(\'forceFopen\', $props, false, true);\\n$method = null;\\nif (extension_loaded(\'curl\') && (!$forceFopen)) {\\n    $method = \'curl\';\\n} elseif (ini_get(\'allow_url_fopen\')) {\\n    $method = \'fopen\';\\n} else {\\n    die($this->modx->lexicon(\'ugm_no_curl_no_fopen\'));\\n}\\n\\n$lastCheck = $modx->getOption(\'lastCheck\', $props, \'2015-08-17 00:00:004\', true);\\n$interval = $modx->getOption(\'interval\', $props, \'+1 week\', true);\\n$interval = \'+1 week\';\\n$hideWhenNoUpgrade = $modx->getOption(\'hideWhenNoUpgrade\', $props, false, true);\\n$plOnly = $modx->getOption(\'plOnly\', $props);\\n$versionsToShow = $modx->getOption(\'versionsToShow\', $props, 5);\\n$currentVersion = $modx->getOption(\'settings_version\');\\n$latestVersion = $modx->getOption(\'latestVersion\', $props, \'\', true);\\n$versionListPath = $upgrade->getVersionListPath();\\n\\n$versionListExists = false;\\n\\n$fullVersionListPath = $versionListPath . \'versionlist\';\\nif (file_exists($fullVersionListPath)) {\\n    $v = file_get_contents($fullVersionListPath);\\n    if (! empty($v)) {\\n        $versionListExists = true;\\n    }\\n}\\n\\n$timeToCheck = $upgrade->timeToCheck($lastCheck, $interval);\\n\\/* Perform check if no versionlist or latestVersion, or if it\'s time to check *\\/\\nif ((!$versionListExists ) || $timeToCheck || empty($latestVersion)) {\\n    $upgradeAvailable = $upgrade->upgradeAvailable($currentVersion, $plOnly, $versionsToShow, $method);\\n    $latestVersion = $upgrade->getLatestVersion();\\n} else {\\n    $upgradeAvailable = version_compare($currentVersion, $latestVersion) < 0;;\\n}\\n$placeholders = array();\\n$placeholders[\'[[+ugm_current_version]]\'] = $currentVersion;\\n$placeholders[\'[[+ugm_latest_version]]\'] = $latestVersion;\\n\\n$errors = $upgrade->getErrors();\\n\\nif (!empty($errors)) {\\n    $msg = \'\';\\n    foreach ($errors as $error) {\\n        $msg .= \'<br\\/><span style=\\"color:red\\">\' . $modx->lexicon(\'ugm_error\') .\\n            \': \' . $error . \'<\\/span>\';\\n    }\\n\\n    \\/* attempt to delete any files created *\\/\\n    rrmdir(MODX_BASE_PATH . \'ugmtemp\');\\n\\n    if (file_exists(MODX_BASE_PATH . \'modx.zip\')) {\\n        @unlink(MODX_BASE_PATH . \'modx.zip\');\\n    }\\n    if (file_exists(MODX_BASE_PATH . \'upgrade.php\')) {\\n        @unlink(MODX_BASE_PATH . \'upgrade.php\');\\n    }\\n\\n\\n    return $msg;\\n}\\n\\n$placeholders[\'[[+ugm_current_version_caption]]\'] = $modx->lexicon(\'ugm_current_version_caption\');\\n$placeholders[\'[[+ugm_latest_version_caption]]\'] = $modx->lexicon(\'ugm_latest_version_caption\');\\n\\n\\/* See if there\'s a new version and if it\'s downloadable *\\/\\nif ($upgradeAvailable) {\\n    $placeholders[\'[[+ugm_notice]]\'] = $modx->lexicon(\'ugm_upgrade_available\');\\n    $placeholders[\'[[+ugm_notice_color]]\'] = \'green\';\\n    $placeholders[\'[[+ugm_logout_note]]\'] = \'<br\\/><br\\/>(\' .\\n        $modx->lexicon(\'ugm_logout_note\')\\n        . \')\';\\n    $placeholders[\'[[+ugm_form]]\'] = \'<br\\/><br\\/>\\n        <form method=\\"post\\" action=\\"\\">\\n           <input class=\\"x-btn x-btn-small x-btn-icon-small-left primary-button x-btn-noicon\\"\\n                    type=\\"submit\\" name=\\"UpgradeMODX\\" value=\\"\' . $modx->lexicon(\'ugm_upgrade_modx\') .  \'\\">\\n        <\\/form>\';\\n\\n} else {\\n    if ($hideWhenNoUpgrade) {\\n        return \'\';\\n    } else {\\n        $placeholders[\'[[+ugm_notice]]\'] = $modx->lexicon(\'ugm_modx_up_to_date\');\\n        $placeholders[\'[[+ugm_notice_color]]\'] = \'gray\';\\n    }\\n}\\n\\n\\/* Get Tpl *\\/\\n\\n$tpl = $modx->getChunk(\'UpgradeMODXTpl\');\\n\\n\\/* Do the replacements *\\/\\n$tpl = str_replace(array_keys($placeholders), array_values($placeholders), $tpl);\\n\\nif (php_sapi_name() === \'cli\') {\\n    echo $tpl;\\n}\\n\\nreturn $tpl;"}',
        'guid' => 'e0c2115f0fa7fb62239eff25c2dc85ef',
        'native_key' => 1,
        'signature' => '1b19ce33d0a095b16053ff8ab55cdfab',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'upgrademodx',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"upgrademodx-1.5.4-pl\\/modCategory\\/be2f977a917f560f9e7b33ff2e5ede53\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"upgrademodx"}',
    ),
    1 => 
    array (
      'type' => 'php',
      'body' => '{"source":"upgrademodx-1.5.4-pl\\/modCategory\\/be2f977a917f560f9e7b33ff2e5ede53.widget.resolver.resolver","type":"php","name":"widget.resolver"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"upgrademodx-1.5.4-pl\\/modCategory\\/be2f977a917f560f9e7b33ff2e5ede53.upgrademodx.resolver.resolver","type":"php","name":"upgrademodx.resolver"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'c8ab84dd75ecc4cd9dd7ed4a701c3fe5',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => 'be2f977a917f560f9e7b33ff2e5ede53',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"UpgradeMODX","rank":0}',
);